import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.dependencies.ModDependency
import com.modrinth.minotaur.dependencies.VersionDependency
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import net.darkhax.curseforgegradle.TaskPublishCurseForge
import net.darkhax.curseforgegradle.UploadArtifact
import net.neoforged.gradle.dsl.common.runs.run.Run

import java.util.function.Consumer

plugins {
    id 'org.ajoberstar.grgit.service' version '5.2.2'
    id 'net.darkhax.curseforgegradle' version '1.1.23'
    id "com.modrinth.minotaur" version "2.+"
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.142'
    id 'net.neoforged.gradle.mixin' version '7.0.142'
}

tasks.named('wrapper', Wrapper).configure {
    //Define wrapper values here so as to not have to always do so when updating gradlew.properties
    gradleVersion = '8.7'
    distributionType = Wrapper.DistributionType.ALL
}





















group = group_id
version = "${mod_version}"
archivesBaseName = "Numina-NeoForge-${minecraft_version}"

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of("${java_version}"))
//        vendor.set(JvmVendorSpec.JETBRAINS)
        vendor.set(JvmVendorSpec.AMAZON)
    }
}

minecraft {
    accessTransformers {
        files(
                file('src/main/resources/META-INF/accesstransformer.cfg'),
                file('src/powersuits/resources/META-INF/accesstransformer.cfg'),
                file('src/mpsrecipecreator/resources/META-INF/accesstransformer.cfg')
        )
    }
}

static void setupClientAcc(Run run) {
    //The below if statements are to add args to your gradle.properties file in user home
    // (DO NOT add them directly to the gradle.properties file for this project)
    // Setting the below properties allows use of your normal Minecraft account in the
    // dev environment including having your skin load. Each property also has a comment
    // explaining what information to set the value to/format it expects
    // One thing to note is because of the caching that goes on, after changing these
    // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
    if (run.project.hasProperty('mc_uuid')) {
        //Your uuid without any dashes in the middle
        run.programArguments('--uuid', (String) run.project.property('mc_uuid'))
    }
    if (run.project.hasProperty('mc_username')) {
        //Your username/display name, this is the name that shows up in chat
        // Note: This is not your email, even if you have a Mojang account
        run.programArguments('--username', (String) run.project.property('mc_username'))
    }
    if (run.project.hasProperty('mc_accessToken')) {
        //Your access token, you can find it in your '.minecraft/launcher_accounts.json' file
        run.programArguments('--accessToken', (String) run.project.property('mc_accessToken'))
    }
}

runs {
    configureEach { Run run ->
        if (run.project.hasProperty('forge_force_ansi')) {
            //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
            // or eclipse's plugin that adds support for ansi escape in console
            run.jvmArgument("-Dterminal.ansi=${run.project.property('forge_force_ansi')}")
        }

        run.modSources(sourceSets.main)

        for (String name : secondaryModules) {
            run.modSource(sourceSets.getByName(name))
        }

        //if the selected toolchain is a JBR, enable DCEVM
        if (run.project.javaToolchains.launcherFor(java.toolchain).map { it.metadata.vendor }.getOrElse("").contains("JetBrains")) {
            run.jvmArgument("-XX:+AllowEnhancedClassRedefinition")
        }
    }
    client { run -> setupClientAcc(run) }
    clientAlt {
        configure("client")
        if (!project.hasProperty('mc_username')) {
            //If the property is missing (so the normal runClient task would use Dev as the name),
            // change the name of the alt client type so that it doesn't conflict with the main dev one
            programArguments('--username', 'AltDev')
        }
    }
    server {
    }
    data {
        programArguments('--all', '--output', project.file('src/datagen/generated/').getAbsolutePath(),
                '--mod', 'numina', '--existing', project.file('src/main/resources/').getAbsolutePath())

        modSource(sourceSets.datagenMain)

        for (String name : secondaryModules) {
            def modName = "${name}"
            modSource(getExtraSourceSet(name, 'datagen'))
            programArguments('--mod', modName, '--existing', project.file("src/${name}/resources/").getAbsolutePath())
        }

        dependencies {
            runtime project.configurations.datagenNonMod
        }
    }
}

void exclusiveRepo(RepositoryHandler handler, String url, String... groups) {
    exclusiveRepo(handler, url, filter -> {
        for (def group : groups) {
            filter.includeGroup(group)
        }
    })
}

//Note: This cannot be static so that fg.repository can be properly accessed
@SuppressWarnings('GrMethodMayBeStatic')
void exclusiveRepo(RepositoryHandler handler, String url, Consumer<InclusiveRepositoryContentDescriptor> filterSetup) {
    handler.exclusiveContent {
        it.forRepositories(handler.maven {
            setUrl(url)
        })
        it.filter { f -> filterSetup.accept(f) }
    }
}

repositories { RepositoryHandler handler ->
    exclusiveRepo(handler, 'https://maven.blamejared.com', filter -> {
        filter.includeGroupByRegex 'com\\.blamejared.*'
        filter.includeGroup 'mezz.jei'
        filter.includeGroup 'org.openzen.zencode'
    })
    exclusiveRepo(handler, 'https://maven.theillusivec4.top/', 'top.theillusivec4.curios')
    exclusiveRepo(handler, 'https://maven.tterrag.com/', 'team.chisel.ctm')
    exclusiveRepo(handler, 'https://squiddev.cc/maven/', 'cc.tweaked', 'org.squiddev')
    exclusiveRepo(handler, 'https://dogforce-games.com/maven/', 'dev.gigaherz.jsonthings')
    exclusiveRepo(handler, 'https://maven2.bai.lol', 'lol.bai', 'mcp.mobius.waila')//WTHIT
    exclusiveRepo(handler, 'https://www.cursemaven.com', 'curse.maven')
    exclusiveRepo(handler, 'https://modmaven.dev/', 'appeng', 'mcjty.theoneprobe')
    exclusiveRepo(handler, 'https://maven.thiakil.com', 'com.thiakil')
    exclusiveRepo(handler, 'https://maven.parchmentmc.org/', 'org.parchmentmc.data')
    flatDir { dirs 'libs' }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

//    runtimeOnly fg.deobf("curse.maven:titanium-287342:4786622")

    runtimeOnly("ignored:tutpower:1.0.0")
    runtimeOnly("mcjty.theoneprobe:theoneprobe:${top_version}") {
        transitive = false
    }

//    runtimeOnly("ignored:architectury-12.1.3-neoforge")
//    runtimeOnly("ignored:cloth-config-14.0.126-neoforge")
//    runtimeOnly("ignored:RoughlyEnoughItems-15.0.728-neoforge")

    runtimeOnly("ignored:FallingTree-1.20.6-1.20.6.67")
    runtimeOnly("ignored:journeymap-1.20.6-5.9.30-neoforge")
}

def getManifestAttributes(String title) {
    return [
            "Specification-Title"     : title,
            "Specification-Vendor"    : "MachineMuse",
            "Specification-Version"   : "${project.version}",
            "Implementation-Title"    : title,
            "Implementation-Version"  : "${project.version}",
            "Implementation-Vendor"   : "MachineMuse",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Automatic-Module-Name": title.toLowerCase(Locale.ROOT)
    ]
}















tasks.withType(Javadoc).configureEach({
    options.tags = [
            'apiNote:a:<em>API Note:</em>',
            'implSpec:a:<em>Implementation Requirements:</em>',
            'implNote:a:<em>Implementation Note:</em>'
    ]
})


















