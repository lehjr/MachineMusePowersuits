import groovy.json.JsonOutput
import groovy.json.JsonSlurper

import java.util.function.Consumer

plugins {
    id 'org.ajoberstar.grgit.service' version '5.2.0' // groovy
//    id 'net.darkhax.curseforgegradle' version '1.0.14' // curseforge uploader
    id "com.matthewprenger.cursegradle" version '1.4.0' // curseforge uploader
//    id "com.modrinth.minotaur" version "2.+" // not yet
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '6.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+' // mappings
    id 'org.spongepowered.mixin' version '0.7.+'
}

wrapper {
    //Define wrapper values here so as to not have to always do so when updating gradlew.properties
    gradleVersion = '8.3'
    distributionType = Wrapper.DistributionType.ALL
}

defaultTasks 'build'

idea {
    module {
        // For some reason this is necessary for IDEA 2014 workspaces to recognize assets
        inheritOutputDirs = true
        //Exclude directories from being managed
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            excludeDirs.add(new File(projectDir, excludeDirName))
        }
    }
}

group = group_id
def basicVersion = "${mod_version}." + (System.env.BUILD_NUMBER ?: 000)
version = "${minecraft_version}-${basicVersion}"
archivesBaseName = "Numina"

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of("${java_version}"))
        vendor.set(JvmVendorSpec.JETBRAINS)
//                vendor.set(JvmVendorSpec.AMAZON)
    }
}

// IDE settings can override this, so really this is irrelevant
//println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

println("version: ${project.version}")

ext {
    versionProperties = [
            "mod_version": project.version,
            "minecraft_version": minecraft_version_range,
            "forge_version": forge_version_range,
            "loader_version": loader_version_range,
            "jei_version": jei_version_range
    ]
    //Fallback pack format is the larger of the resource and data pack formats
    packProperties = [
            "pack_format": Math.max(Integer.parseInt(resource_pack_format), Integer.parseInt(data_pack_format)),
            "resource_pack_format": resource_pack_format,
            "data_pack_format": data_pack_format
    ]
    jsonPatterns = ["**/*.json", "**/*.mcmeta"]
}

sourceSets {
    // Numina
    main {
        resources {
            include '**/**'
            //Add the generated main module resources
            srcDirs += 'src/datagen/generated/numina'
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
    }
    powersuits {
        setupSourceSet(powersuits)
    }
    mpsrecipecreator {
        setupSourceSet(mpsrecipecreator)
    }
    mpswhatever {
        setupSourceSet(mpswhatever)
    }

    //Data gen modules for the different modules
    datagenmain {
        setupDataGenSourceSet(datagenmain, main)
    }
    datagenpowersuits {
        setupDataGenSourceSet(datagenpowersuits, powersuits)
    }
    datagenmpsrecipecreator {
        setupDataGenSourceSet(datagenmpsrecipecreator, mpsrecipecreator)
    }
    datagenmpswhatever {
        setupDataGenSourceSet(datagenmpswhatever, mpswhatever)
    }
}

//This method sets up an additional sourceSet in src/$name and adds a reference to the corresponding
// data gen's resource directory excluding the cache. It also adds the main Numina module
// to the dependencies of the source set we are setting up
def setupSourceSet(SourceSet sourceSet) {
    String name = sourceSet.name
    sourceSet.resources {
        //Add the generated module resources
        srcDirs += "src/datagen/generated/${name}"
        //But exclude the cache of the generated data from what gets built
        exclude '.cache'
    }
    sourceSet.compileClasspath += sourceSets.main.output
}

//This method sets up a source set in datagen/$name and adds the main numina module and an optional
// base module to the dependencies of the data generators source set that we are setting up
def setupDataGenSourceSet(SourceSet datagenSourceSet, SourceSet baseSourceSet) {
    String name = baseSourceSet.name
    datagenSourceSet.java.srcDirs = ["src/datagen/${name}/java"]
    datagenSourceSet.compileClasspath += project.sourceSets.main.output
    if (baseSourceSet == sourceSets.main) {
        //Base source set has resources that we put files that our annotation processor generates for consumption by our datagen
        datagenSourceSet.resources.srcDirs = ["src/datagen/${name}/resources"]
    } else {
        //Data gen sourceSets outside of the main one have no resources
        datagenSourceSet.resources.srcDirs = []
        //Only case it is null is when we are doing datagenmain so other cases also add access to the stuff
        // in datagenmain so we can add helper classes
        datagenSourceSet.compileClasspath += project.sourceSets.datagenmain.output
        datagenSourceSet.compileClasspath += baseSourceSet.output
    }
}

configurations {
    //Make sure all our sub source set stuff extends the proper base methods so that
    // they can see all the dependencies we have in dependencies including forge
    extendConfigurations(implementation, datagenmainImplementation)
    extendConfigurations(compileOnly, datagenmainCompileOnly)
    extendConfigurations(runtimeOnly, datagenmainRuntimeOnly)
    //Extend configurations for alternate modules. First by making the implementation, compileOnly, runtimeOnly equivalents
    // for those modules extend the main ones, and then by making the corresponding ones for datagen for the module extend those.
    // This way if we add a dependency/integration in a submodule instead of the main module of Numina, the datagen of the corresponding
    // module will be able to properly access the dependency
    for (def name : ["powersuits", "mpsrecipecreator", "mpswhatever"]) {
        maybeCreate("datagen${name}Implementation").extendsFrom(maybeCreate("${name}Implementation").extendsFrom(implementation))
        maybeCreate("datagen${name}CompileOnly").extendsFrom(maybeCreate("${name}CompileOnly").extendsFrom(compileOnly))
        maybeCreate("datagen${name}RuntimeOnly").extendsFrom(maybeCreate("${name}RuntimeOnly").extendsFrom(runtimeOnly))
    }
}

static void extendConfigurations(Configuration base, Configuration... configurations) {
    for (def configuration : configurations) {
        configuration.extendsFrom(base)
    }
}

def mainReplaceResources = createReplaceResourcesTask(sourceSets.main)
def powersuitsReplaceResources = createReplaceResourcesTask(sourceSets.powersuits)
def mpsrecipecreatorReplaceResources = createReplaceResourcesTask(sourceSets.mpsrecipecreator)
def mpswhateverReplaceResources = createReplaceResourcesTask(sourceSets.mpswhatever)

def createReplaceResourcesTask(SourceSet sourceSet) {
    String output = sourceSet.name;
    return tasks.register("${output}ReplaceResources", Copy) {
        it.outputs.upToDateWhen { false }
        def modsToml = copySpec {
            from(sourceSet.resources) {
                include "META-INF/mods.toml"
                expand versionProperties
            }
        }
        //Copy it into the build dir
        it.with modsToml
        it.into "$buildDir/resources/${output}/"
        //If IntelliJ's output dir exists, copy it there as well
        if (new File("$rootDir/out/production/Numina.${output}/").exists()) {
            //Note: This copies it into the correct place, but it still doesn't have the IntelliJ
            // run work by default because of incorrect MOD_CLASSES getting generated.
            // probably related to us setting inheritOutputDirs
            copy {
                with modsToml
                into "$rootDir/out/production/Numina.${output}/"
            }
        }
        //If Eclipse's output dir exists, copy it there as well
        if (new File("$rootDir/bin/${output}/").exists()) {
            copy {
                with modsToml
                into "$rootDir/bin/${output}/"
            }
        }
    }
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'mixins.numina.refmap.json'
    config 'numina.mixins.json'

    debug.verbose = true
    debug.export = true
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformers.from(
            file('src/main/resources/META-INF/accesstransformer.cfg'),
            file('src/powersuits/resources/META-INF/accesstransformer.cfg'),
            file('src/mpsrecipecreator/resources/META-INF/accesstransformer.cfg'))

    runs {
        client {
            workingDirectory file("run/client")
            //This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            //The below if statements are to add args to your gradle.properties file in user home
            // (DO NOT add them directly to the gradle.properties file for this project)
            // Setting the below properties allows use of your normal Minecraft account in the
            // dev environment including having your skin load. Each property also has a comment
            // explaining what information to set the value to/format it expects
            // One thing to note is because of the caching that goes on, after changing these
            // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_accounts.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }
            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods {
                numina.sources((SourceSet) sourceSets.main)
                modularpowersuits.source((SourceSet) sourceSets.powersuits)
                mpsrecipecreator.source((SourceSet) sourceSets.mpsrecipecreator)
                mpswhatever.source((SourceSet) sourceSets.mpswhatever)
            }
        }

        server {
            workingDirectory file("run/server")
            //This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods {
                numina.sources((SourceSet) sourceSets.main)
                modularpowersuits.source((SourceSet) sourceSets.powersuits)
                mpsrecipecreator.source((SourceSet) sourceSets.mpsrecipecreator)
                mpswhatever.source((SourceSet) sourceSets.mpswhatever)
            }
        }

        data {
            workingDirectory file("run/data")
            environment 'target', 'fmluserdevdata'
            //This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            args '--all', '--output', file('src/datagen/generated/'),
                    '--mod', 'numina',
                    '--existing', file('src/main/resources/'),

                    '--mod', 'powersuits',
                    '--existing', file('src/powersuits/resources/'),

                    '--mod', 'mpsrecipecreator',
                    '--existing', file('src/mpsrecipecreator/resources/'),

                    '--mod', 'mpswhatever',
                    '--existing', file('src/mpswhatever/resources/')

            mods {
                numina.sources((SourceSet[]) [sourceSets.main, sourceSets.datagenmain])
                modularpowersuits.sources((SourceSet[]) [sourceSets.powersuits, sourceSets.datagenpowersuits])
                mpsrecipecreator.sources((SourceSet[]) [sourceSets.mpsrecipecreator, sourceSets.datagenmpsrecipecreator])
                mpswhatever.sources((SourceSet[]) [sourceSets.mpswhatever, sourceSets.datagenmpswhatever])
            }
        }
    }
}

void exclusiveRepo(RepositoryHandler handler, String url, String... groups) {
    exclusiveRepo(handler, url, filter -> {
        for (def group : groups) {
            filter.includeGroup(group)
        }
    })
}

//Note: This cannot be static so that fg.repository can be properly accessed
@SuppressWarnings('GrMethodMayBeStatic')
void exclusiveRepo(RepositoryHandler handler, String url, Consumer<InclusiveRepositoryContentDescriptor> filterSetup) {
    handler.exclusiveContent {
        it.forRepositories(handler.maven {
            setUrl(url)
        }, fg.repository)//Add FG's repo so we make sure we are able to then find the mapped deps
        it.filter { f -> filterSetup.accept(f) }
    }
}

repositories { RepositoryHandler handler ->
    exclusiveRepo(handler, 'https://maven.blamejared.com', filter -> {
        filter.includeGroupByRegex 'com\\.blamejared.*'
        filter.includeGroup 'mezz.jei'
    })
    exclusiveRepo(handler, 'https://maven.theillusivec4.top/', 'top.theillusivec4.curios')
    exclusiveRepo(handler, 'https://maven.tterrag.com/', 'team.chisel.ctm')
    exclusiveRepo(handler, 'https://squiddev.cc/maven/', 'org.squiddev')
    exclusiveRepo(handler, 'https://www.cursemaven.com', 'curse.maven')
    exclusiveRepo(handler, 'https://modmaven.dev/', 'appeng', 'mcjty.theoneprobe')

    jcenter()
//    flatDir {
//        dirs 'libs'
//    }
}

dependencies {
    minecraft("net.minecraftforge:forge:${minecraft_version}-${forge_version}") {
//        exclude group: 'net.java.dev.jna', module: 'jna-platform'
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    // Only used as a convenience during testing
    runtimeOnly fg.deobf("curse.maven:theoneprobe-245211:${top_version}"){ // FIXME!!!
        transitive = false
    }

    implementation fg.deobf("curse.maven:configured-457570:4462837")

    runtimeOnly fg.deobf("curse.maven:architectury-api-419699:${architectury_version}")// architectury-api/files/4555756

    runtimeOnly fg.deobf("curse.maven:scannable-266784:${scannable_version}")

    implementation fg.deobf("curse.maven:applied-energistics-2-223794:${ae2_version}") {
        transitive = false
    }

    runtimeOnly fg.deobf("curse.maven:titanium-287342:4786622")

    runtimeOnly fg.deobf("curse.maven:industrial-foregoing-266515:5047821")


    implementation fg.deobf("curse.maven:ic2-classic-242942:5152384") {
        transitive = false
    }
}

if (project.hasProperty('UPDATE_MAPPINGS')) {
    //If the project has the update mappings property, configure it to be able to target all our extra sourceSets as well
    // so that whenever we need to update mappings it is quick and easy to do so.
    // Note: This needs to be below the dependencies and minecraft blocks so that it can properly read the mappings value
    // and also read and find the minecraft dep
    def extraSourceSets = [
            sourceSets.powersuits,
            sourceSets.mpsrecipecreator,
            sourceSets.mpswhatever,
            sourceSets.datagenmain,

            sourceSets.datagenpowersuits,
            sourceSets.datagenmpsrecipecreator,
            sourceSets.datagenmpswhatever
    ]
    Set<File> allExtraDirs = new HashSet<>()
    for (def sourceSet : extraSourceSets) {
        allExtraDirs.addAll(sourceSet.java.srcDirs)
    }
    extractRangeMap {
        sources.from(allExtraDirs)
    }
    applyRangeMap {
        sources.from(allExtraDirs)
    }
    allExtraDirs.each { extractMappedNew.addTarget it }
}

//Set the various variables/settings for the different process resources tasks
processResources { setupProcessResources(processResources, mainReplaceResources) }
processPowersuitsResources { setupProcessResources(processPowersuitsResources, powersuitsReplaceResources) }
processMpsrecipecreatorResources { setupProcessResources(processMpsrecipecreatorResources, mpsrecipecreatorReplaceResources) }
processMpswhateverResources { setupProcessResources(processMpswhateverResources, mpswhateverReplaceResources) }
processDatagenmainResources { dependsOn(compileJava) }

def setupProcessResources(ProcessResources process, TaskProvider<Task> replaceResources) {
    process.duplicatesStrategy(DuplicatesStrategy.FAIL)
    process.exclude('META-INF/mods.toml')
    process.from("${projectDir}") { include 'logo.png' }
    process.configure { finalizedBy(replaceResources) }
    process.doLast {
        fileTree(dir: process.getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
            File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file)))
        }
    }
}

//Make the various classes tasks depend on the corresponding replaceResources tasks in addition to the default processResources tasks they depend on
classes.configure { dependsOn(mainReplaceResources) }
powersuitsClasses.configure { dependsOn(powersuitsReplaceResources) }
mpsrecipecreatorClasses.configure { dependsOn(mpsrecipecreatorReplaceResources) }
mpswhateverClasses.configure { dependsOn(mpswhateverReplaceResources) }

def getManifestAttributes(String title) {
    return [
            "Specification-Title"     : title,
            "Specification-Vendor"    : "MachineMuse",
            "Specification-Version"   : "${project.version}",
            "Implementation-Title"    : title,
            "Implementation-Version"  : "${project.version}",
            "Implementation-Vendor"   : "MachineMuse",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Automatic-Module-Name": title.toLowerCase(Locale.ROOT)
    ]
}

jar {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
//    archiveFileName.set("Numina-${minecraft_version}-${project.version}.jar")
    archiveFileName.set("Numina-${project.version}.jar")
    from(sourceSets.main.output)
    manifest.attributes(getManifestAttributes("Numina"))
    afterEvaluate { finalizedBy reobfJar }
}

task powersuitsJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
//    archiveFileName.set("ModularPowersuits-${minecraft_version}-${project.version}.jar")
    archiveFileName.set("ModularPowersuits-${project.version}.jar")
    archiveClassifier.set("powersuits")
    from sourceSets.powersuits.output
    manifest.attributes(getManifestAttributes("ModularPowersuits"))
    afterEvaluate { finalizedBy reobfPowersuitsJar }
}

task mpsrecipecreatorJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
//    archiveFileName.set("MPSRecipecreator-${minecraft_version}-${project.version}.jar")
    archiveFileName.set("MPSRecipecreator-${project.version}.jar")
    archiveClassifier.set("mpsrecipecreator")
    from sourceSets.mpsrecipecreator.output
    manifest.attributes(getManifestAttributes("MPSRecipecreator"))
    afterEvaluate { finalizedBy reobfMpsrecipecreatorJar }
}

task mpswhateverJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
//    archiveFileName.set("MPSWhatever-${minecraft_version}-${project.version}.jar")
    archiveFileName.set("MPSWhatever-${project.version}.jar")
    archiveClassifier.set("mpswhatever")
    from sourceSets.mpswhatever.output
    manifest.attributes(getManifestAttributes("MPSWhatever"))
    afterEvaluate { finalizedBy reobfMpswhateverJar }
}

clean {
    //TODO: Try to come up with a slightly better solution to this that deletes more,
    // for example make it calculate the current hash and only leave that or only do
    // this if clean build is being ran. We also ideally would have it remove some of
    // the data from our generated folder, but for now this will do given jenkins runs
    // a clean build because we need to make sure it doesn't fail
    def filteredDelete = new HashSet<>()
    for (def toDelete : getDelete()) {
        for (def f : file(toDelete).listFiles()) {
            if (f.getName() != "fg_cache") {
                if (f.getName() == "generated") {
                    for (def generated : file(f).listFiles()) {
                        if (generated.getName() != "data" && generated.getName() != "META-INF") {
                            filteredDelete.add(generated)
                        }
                    }
                } else {
                    filteredDelete.add(f)
                }
            }
        }
    }
    setDelete(filteredDelete)
}

tasks.withType(JavaCompile).configureEach({
    it.options.encoding = 'UTF-8'
    it.options.compilerArgs << "-Xmaxerrs" << "100000"
})

compileJava {
    options.getGeneratedSourceOutputDirectory().set(file("src/datagen/main/resources/"))
}

artifacts {
    archives jar
    archives powersuitsJar
    archives mpsrecipecreatorJar
    archives mpswhateverJar
}

reobf {
    jar { classpath.from(sourceSets.main.compileClasspath) }
    powersuitsJar { classpath.from(sourceSets.powersuits.compileClasspath) }
    mpsrecipecreatorJar { classpath.from(sourceSets.mpsrecipecreator.compileClasspath) }
    mpswhateverJar { classpath.from(sourceSets.mpswhatever.compileClasspath) }
}

//Minimize/optimize all png files, requires optipng on the PATH
// Credits: BrainStone
void minimizePNGFile(File file) {
    long size = file.length()
    exec {
        executable "optipng"
        args "-q", "-o7", "-zm1-9", "-strip", "all", file
    }
    long newSize = file.length()
    if (newSize < size) {
        System.out.format("Reduced File size of %s from %d bytes to %d bytes (reduced by %.2f%%)\n",
                file, size, newSize, ((double) (size - newSize)) / ((double) size) * 100.0)
    }
}

task optimizePng {
    def pngPatterns = ["**/*.png"]
    doLast {
        //Ensure the logo is minimized (we add this file to each jar)
        minimizePNGFile(file("${projectDir}/logo.png"))
        //Minimize any PNGs in the source sets
        def sourceSets = [sourceSets.main, sourceSets.powersuits, sourceSets.mpsrecipecreator, sourceSets.mpswhatever]
        for (def sourceSet : sourceSets) {
            for (dir in sourceSet.resources.srcDirs) {
                fileTree(dir: dir, includes: pngPatterns).each { minimizePNGFile(it) }
            }
        }
    }
}

tasks.withType(GenerateModuleMetadata) {
    //Disable Gradle 7 module metadata generation as it does not play nicely with FG
    enabled = false
}

tasks.curseforge.dependsOn jar, powersuitsJar, mpsrecipecreatorJar, mpswhateverJar
if (System.getenv("CURSEFORGE_KEY") != null || project.hasProperty('curseforgeKey')) {
    println "Enabling Curseforge config"
    curseforge {
        apiKey = System.getenv("CURSEFORGE_KEY") ?: project.findProperty("curseforgeKey")

        def resolvedChangelog = null

        //closure to generate the changelog once, and only when needed by CurseGradle
        def changeLogResolver = { ->
            if (resolvedChangelog != null) {
                return resolvedChangelog
            }
            def generatedChangelog = "Unable to generate changelog :("
            def currentCommit = System.getenv("GIT_COMMIT")
            def prevCommit = System.getenv("GIT_PREVIOUS_SUCCESSFUL_COMMIT") ?: System.getenv("GIT_PREVIOUS_COMMIT")

            if (currentCommit != null && prevCommit != null) {
                generatedChangelog = ""
                grgit.log {
                    range(prevCommit, currentCommit)
                }.reverse().each { commit ->
                    //Use full message rather than short message to get any new lines, and trim it so that any trailing new lines
                    // get removed so that we don't end up with extra spaces
                    String message = commit.fullMessage.trim()
                    if (!message.startsWith("Merge branch") && !message.startsWith("Merge pull request")) {
                        //Ignore Merges and PR Merges
                        message = message.replaceAll("#(\\d+)", { match ->//turn issues/prs into links (github currently supports prs being linked as issues)
                            return "<a href=\"https://github.com/lehjr/MachineMusePowersuits/issues/${match[1]}\">${match[0]}</a>"
                        }).replaceAll("\\n", "<br>&emsp;")//convert new lines that are part of a commit message into actual new lines and a tab
                        if (generatedChangelog != "") {
                            //If this isn't the first commit prepend an extra newline
                            generatedChangelog += "<br>"
                        }
                        generatedChangelog += "<a href=\"https://github.com/lehjr/MachineMusePowersuits/commit/${commit.id}\">${commit.getAbbreviatedId()}</a> - ${message}"
                    }
                }
                println "Changelog generated"
            }

            def releaseNotesFile = project.file("docs/release_${project.version}.html")
            if (releaseNotesFile.exists()) {
                //Add any version specific changelog stuff
                def releaseNotes = releaseNotesFile.getText()
                generatedChangelog = "$releaseNotes<br> $generatedChangelog"
            }

            if (curse_release_type == "alpha") {
                //Add a warning at the top about what an alpha build means
                generatedChangelog = "Warning: ModularPowersuits is currently in alpha, and is not recommended for widespread use in modpacks. There are likely to be game breaking bugs, " +
                        "and updating from one alpha to the next may cause various issues. While we will try to not have this happen/keep it to a minimum make sure " +
                        "to make backups." + "<br> $generatedChangelog"
            }
            resolvedChangelog = generatedChangelog
            return generatedChangelog
        }

        // Numina
        project {
            id = '235440'
            changelogType = "html"
            changelog = changeLogResolver
            // A file can also be set using: changelog = file('changelog.txt')
            releaseType = "${curse_release_type}"
            mainArtifact(jar) {
                relations {
                    optionalDependency "applied-energistics-2"
                }
            }
            addGameVersion "${minecraft_version}"
        }

        // Modular Powersuits
        project {
            id = '235442'
            changelogType = "html"
            changelog = changeLogResolver
            releaseType = "${curse_release_type}"
            mainArtifact(powersuitsJar) {
                relations {
                    requiredDependency "numina"
                    optionalDependency "applied-energistics-2"
                }
            }
            addGameVersion "${minecraft_version}"
        }
    }
}