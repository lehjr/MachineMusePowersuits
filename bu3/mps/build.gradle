plugins {
    id 'net.neoforged.moddev'
}

def minecraftVersion = project.minecraftVersion
def neoForgeVersion = project.neoForgeVersion

apply from: rootProject.file('buildSrc/shared.gradle')

// Mojang ships Java 21 to end users in 1.20.5+, so your mod should target Java 21.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

def jeiMinecraftVersion = project.jeiMinecraftVersion
def jeiVersion = project.jeiVersion
def athenaVersion = project.athenaVersion
def ae2Version = project.ae2Version
def jadeFileId = project.jadeFileId
def mekanismMinecraftVersion = project.mekanismMinecraftVersion
def mekanismVersion = project.mekanismVersion

dependencies {
    // Include modules
    jarJar project(':numina')
    jarJar project(':powersuits')
    jarJar project(':mpswhatever')
    implementation project(':numina')
    implementation project(':powersuits')
    implementation project(':mpswhatever')

    // JEI
    runtimeOnly "mezz.jei:jei-${jeiMinecraftVersion}-common:${jeiVersion}"
    runtimeOnly "mezz.jei:jei-${jeiMinecraftVersion}-neoforge:${jeiVersion}"

    // CC: Tweaked
    // TODO: Does not start on latest NeoForge
    // runtimeOnly "cc.tweaked:cc-tweaked-${cctMinecraftVersion}-net.forge:${cctVersion}"

    //Athena ctm
    runtimeOnly "maven.modrinth:athena-ctm:${athenaVersion}"

    // AE2
    runtimeOnly "appeng:appliedenergistics2:${ae2Version}"

    // Jade
    runtimeOnly "curse.maven:jade-324717:${jadeFileId}"

    // Mekanism
    runtimeOnly "mekanism:Mekanism:${mekanismMinecraftVersion}-${mekanismVersion}"
}

neoForge {
    version = neoForgeVersion

    runs {
        configureEach {
            logLevel = org.slf4j.event.Level.INFO
        }

        client {
            client()
        }

        server {
            server()
        }
    }

    mods {
        numina {
            dependency project(':numina')
        }

        powersuits {
            sourceSet project(':powersuits').sourceSets.main
        }

        mpswhatever {
            sourceSet project(':mpswhatever').sourceSets.main
        }
    }
}

// Collect all API packages from all modules.
task apiJar(type: Jar) {
    archiveClassifier = 'api'

    from project(':enderio-armory').sourceSets.main.output
    from project(':enderio-armory').sourceSets.main.allJava
    from project(':enderio-base').sourceSets.main.output
    from project(':enderio-base').sourceSets.main.allJava
    from project(':enderio-conduits').sourceSets.main.output
    from project(':enderio-conduits').sourceSets.main.allJava
    from project(':enderio-machines').sourceSets.main.output
    from project(':enderio-machines').sourceSets.main.allJava

    include 'com/enderio/api/**'
    include 'com/enderio/*/api/**'
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'

    from project(':enderio-armory').sourceSets.main.allJava
    from project(':enderio-base').sourceSets.main.allJava
    from project(':enderio-conduits').sourceSets.main.allJava
    from project(':enderio-machines').sourceSets.main.allJava
}

tasks.build {
    dependsOn apiJar
    dependsOn sourcesJar
}

publishing {
    publications {
        enderio(MavenPublication) {
            groupId = 'com.enderio'
            artifactId = "enderio-${minecraftVersion}"
            version = "${project.version}"

            artifact tasks.jar
            artifact tasks.apiJar
            artifact tasks.sourcesJar

            pom {
                name = 'EnderIO'
                description = 'The core modules of Ender IO'
                url = 'https://github.com/Team-EnderIO/EnderIO'

                licenses {
                    license {
                        name = 'Unlicense'
                        url = 'https://github.com/Team-EnderIO/EnderIO/blob/dev/1.21/LICENSE.txt'
                    }
                }
            }
        }
    }
}

